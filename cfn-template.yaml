AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Elemental Media Services sample stack to build off of.
Resources:
  AWSElementalMediaServicesRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSElementalMediaServicesRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: medialive.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElementalMediaPackageFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: MediaLiveCustomPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: medialive:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - mediastore:ListContainers
                  - mediastore:PutObject
                  - mediastore:GetObject
                  - mediastore:DeleteObject
                  - mediastore:DescribeObject
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: '*'
        - PolicyName: IAMCustomPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: '*'
                
  MediaLiveAttachRole:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MediaLiveAttachRole
      Handler: index.handler
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Code:
        ZipFile:  { "Fn::Join": ["", [
          "exports.handler = function(event, context, callback){ callback(null, '",
          !GetAtt [ AWSElementalMediaServicesRole, Arn ],
          "'); };"
        ]]}
      Runtime: "nodejs10.x"
      Timeout: "30"

  MediaPackageCreateChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mediapackage.createChannel
      CodeUri: ./lib/mediapackage.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaPackageCreateEndpoints:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mediapackage.createEndpoints
      CodeUri: ./lib/mediapackage.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaPackageDeleteChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mediapackage.deleteChannel
      CodeUri: ./lib/mediapackage.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaPackageDeleteEndpoints:
    Type: AWS::Serverless::Function
    Properties:
      Handler: mediapackage.deleteEndpoints
      CodeUri: ./lib/mediapackage.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30

  SystemsManagerCreateParameters:
    Type: AWS::Serverless::Function
    Properties:
      Handler: systemsmanager.createParameters
      CodeUri: ./lib/systemsmanager.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  SystemsManagerDeleteParameters:
    Type: AWS::Serverless::Function
    Properties:
      Handler: systemsmanager.deleteParameters
      CodeUri: ./lib/systemsmanager.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveCreateInput:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.createInput
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveCreateChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.createChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveDescribeChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.describeChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveDescribeInput:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.describeInput
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveStartChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.startChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveStopChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.stopChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveFindChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.findChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveDeleteChannel:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.deleteChannel
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30
      
  MediaLiveDeleteInput:
    Type: AWS::Serverless::Function
    Properties:
      Handler: medialive.deleteInput
      CodeUri: ./lib/medialive.js
      Role: !GetAtt [ AWSElementalMediaServicesRole, Arn ]
      Runtime: nodejs10.x
      Timeout: 30

  AWSElementalMediaServiceCreate:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of the MediaLive to MediaPackage workflow",
              "StartAt": "MediaPackageCreateChannel",
              "States": {
                "MediaPackageCreateChannel": {
                  "Type": "Task",
                  "Resource": "${mediapackageCreateChannelArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.mediapackage.channel",
                  "Next": "MediaPackageCreateEndpoints"
                },
                "MediaPackageCreateEndpoints": {
                  "Type": "Task",
                  "Resource": "${mediapackageCreateEndpointsArn}",
                  "InputPath": "$.mediapackage.channel",
                  "ResultPath": "$.mediapackage.endpoints",
                  "Next": "SystemsManagerCreateParameters"
                },
                "SystemsManagerCreateParameters": {
                  "Type": "Task",
                  "Resource": "${systemsmanagerCreateParametersArn}",
                  "InputPath": "$.mediapackage.channel",
                  "ResultPath": "$.systemsmanager.parameters",
                  "Next": "MediaLiveAttachRole"
                },
                "MediaLiveAttachRole": {
                  "Type": "Task",
                  "Resource": "${medialiveAttachRoleArn}",
                  "ResultPath": "$.medialive.roleArn",
                  "Next": "MediaLiveCreateInput"
                },
                "MediaLiveCreateInput": {
                  "Type": "Task",
                  "Resource": "${medialiveCreateInputArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.medialive.input",
                  "Next": "MediaLiveCreateChannel"
                },
                "MediaLiveCreateChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveCreateChannelArn}",
                  "InputPath": "$",
                  "ResultPath": "$.medialive.channel",
                  "Next": "WaitForIdleState"
                },
                "WaitForIdleState": {
                  "Type": "Wait",
                  "Seconds": 1,
                  "Next": "MediaLiveDescribeChannel1"
                },
                "MediaLiveDescribeChannel1": {
                  "Type": "Task",
                  "Resource": "${medialiveDescribeChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": "$.medialive.channel",
                  "Next": "IsMediaLiveChannelIdle"
                },
                "IsMediaLiveChannelIdle": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.medialive.channel.State",
                      "StringEquals": "IDLE",
                      "Next": "MediaLiveStartChannel"
                    }
                  ],
                  "Default": "WaitForIdleState"
                },
                "MediaLiveStartChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveStartChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": null,
                  "Next": "WaitForRunningState"
                },
                "WaitForRunningState": {
                  "Type": "Wait",
                  "Seconds": 5,
                  "Next": "MediaLiveDescribeChannel2"
                },
                "MediaLiveDescribeChannel2": {
                  "Type": "Task",
                  "Resource": "${medialiveDescribeChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": "$.medialive.channel",
                  "Next": "IsMediaLiveChannelRunning"
                },
                "IsMediaLiveChannelRunning": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.medialive.channel.State",
                      "StringEquals": "RUNNING",
                      "Next": "Done"
                    }
                  ],
                  "Default": "WaitForRunningState"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - 
            {
              mediapackageCreateChannelArn: !GetAtt [ MediaPackageCreateChannel, Arn ], 
              mediapackageCreateEndpointsArn: !GetAtt [ MediaPackageCreateEndpoints, Arn ],
              systemsmanagerCreateParametersArn: !GetAtt [ SystemsManagerCreateParameters, Arn ],
              medialiveAttachRoleArn: !GetAtt [ MediaLiveAttachRole, Arn ],
              medialiveCreateInputArn: !GetAtt [ MediaLiveCreateInput, Arn ],
              medialiveCreateChannelArn: !GetAtt [ MediaLiveCreateChannel, Arn ],
              medialiveDescribeChannelArn: !GetAtt [ MediaLiveDescribeChannel, Arn ],
              medialiveStartChannelArn: !GetAtt [ MediaLiveStartChannel, Arn ]
            }
      RoleArn: !GetAtt [ AWSElementalMediaServicesRole, Arn ]

  AWSElementalMediaServiceDelete:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "An example of the MediaLive to MediaPackage workflow",
              "StartAt": "MediaLiveFindChannel",
              "States": {
                "MediaLiveFindChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveFindChannelArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.medialive.channel",
                  "Next": "MediaLiveStopChannel"
                },
                "MediaLiveStopChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveStopChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": "$.medialive.channel",
                  "Next": "SystemsManagerDeleteParameters"
                },
                "SystemsManagerDeleteParameters": {
                  "Type": "Task",
                  "Resource": "${systemsmanagerDeleteParametersArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.ssm.results",
                  "Next": "MediaPackageDeleteEndpoints"
                },
                "MediaPackageDeleteEndpoints": {
                  "Type": "Task",
                  "Resource": "${mediapackageDeleteEndpointsArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.mediapackage.deleteEndpoints",
                  "Next": "MediaPackageDeleteChannel"
                },
                "MediaPackageDeleteChannel": {
                  "Type": "Task",
                  "Resource": "${mediapackageDeleteChannelArn}",
                  "InputPath": "$.name",
                  "ResultPath": "$.mediapackage.deleteChannel",
                  "Next": "WaitForChannelIdleState"
                },
                "WaitForChannelIdleState": {
                  "Type": "Wait",
                  "Seconds": 1,
                  "Next": "MediaLiveDescribeChannel"
                },
                "MediaLiveDescribeChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveDescribeChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": "$.medialive.channel",
                  "Next": "IsMediaLiveChannelIdle"
                },
                "IsMediaLiveChannelIdle": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.medialive.channel.State",
                      "StringEquals": "IDLE",
                      "Next": "MediaLiveDeleteChannel"
                    }
                  ],
                  "Default": "WaitForChannelIdleState"
                },
                "MediaLiveDeleteChannel": {
                  "Type": "Task",
                  "Resource": "${medialiveDeleteChannelArn}",
                  "InputPath": "$.medialive.channel.Id",
                  "ResultPath": "$.medialive.deleteChannelResponse",
                  "Next": "WaitForInputDetachedState"
                },
                "WaitForInputDetachedState": {
                  "Type": "Wait",
                  "Seconds": 1,
                  "Next": "MediaLiveDescribeInput"
                },
                "MediaLiveDescribeInput": {
                  "Type": "Task",
                  "Resource": "${medialiveDescribeInputArn}",
                  "InputPath": "$.medialive.channel.InputAttachments[0].InputId",
                  "ResultPath": "$.medialive.input",
                  "Next": "IsMediaLiveInputDetached"
                },
                "IsMediaLiveInputDetached": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.medialive.input.State",
                      "StringEquals": "DETACHED",
                      "Next": "MediaLiveDeleteInput"
                    }
                  ],
                  "Default": "WaitForInputDetachedState"
                },
                "MediaLiveDeleteInput": {
                  "Type": "Task",
                  "Resource": "${medialiveDeleteInputArn}",
                  "InputPath": "$.medialive.channel.InputAttachments[0].InputId",
                  "ResultPath": "$.medialive.deleteInputResponse",
                  "Next": "Done"
                },
                "Done": {
                  "Type": "Pass",
                  "End": true
                }
              }
            }
          - 
            {
              mediapackageDeleteChannelArn: !GetAtt [ MediaPackageDeleteChannel, Arn ], 
              mediapackageDeleteEndpointsArn: !GetAtt [ MediaPackageDeleteEndpoints, Arn ],
              systemsmanagerDeleteParametersArn: !GetAtt [ SystemsManagerDeleteParameters, Arn ],
              medialiveDescribeChannelArn: !GetAtt [ MediaLiveDescribeChannel, Arn ],
              medialiveDescribeInputArn: !GetAtt [ MediaLiveDescribeInput, Arn ],
              medialiveDeleteInputArn: !GetAtt [ MediaLiveDeleteInput, Arn ],
              medialiveDeleteChannelArn: !GetAtt [ MediaLiveDeleteChannel, Arn ],
              medialiveFindChannelArn: !GetAtt [ MediaLiveFindChannel, Arn ],
              medialiveStopChannelArn: !GetAtt [ MediaLiveStopChannel, Arn ]
            }
      RoleArn: !GetAtt [ AWSElementalMediaServicesRole, Arn ]